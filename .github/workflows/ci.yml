name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI usage by testing nightly only on Ubuntu
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run unit tests
      run: cargo test --verbose --all-features --lib

    - name: Run integration tests  
      run: cargo test --verbose --all-features --test '*'

    - name: Run doctests
      run: cargo test --verbose --all-features --doc

    - name: Test examples
      run: |
        cargo build --example turbomcp_demo --features turbomcp
        cargo build --example simple_server

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-tarpaulin
      uses: taiki-e/install-action@cargo-tarpaulin

    - name: Run coverage
      run: |
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 \
          --exclude-files "*/tests/*" --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Upload benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: cargo audit --deny warnings

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check dependencies
      run: cargo deny check

    - name: Check licenses
      run: cargo deny check licenses

    - name: Check banned dependencies
      run: cargo deny check bans

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install MSRV Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.89.0  # Latest stable version

    - name: Check MSRV compilation
      run: cargo check --all-features

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Deploy docs to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  fuzz:
    name: Fuzzing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Run fuzzing tests
      run: |
        cd fuzz
        cargo fuzz run json_parsing -- -max_total_time=300
        cargo fuzz run tool_execution -- -max_total_time=300

  property-test:
    name: Property Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run property tests
      run: cargo test --all-features property_tests

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run integration tests with database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: cargo test --all-features integration

  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install MCP Inspector
      run: npm install -g @modelcontextprotocol/inspector

    - name: Test MCP compatibility
      run: |
        cargo build --example turbomcp_demo --features turbomcp
        timeout 30s npx @modelcontextprotocol/inspector ./target/debug/examples/turbomcp_demo || true

  memory-safety:
    name: Memory Safety
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Install Miri
      run: rustup component add miri

    - name: Run Miri
      run: |
        cargo miri setup
        MIRIFLAGS="-Zmiri-disable-isolation" cargo miri test --all-features

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Run performance tests
      run: |
        cargo test --release --all-features performance_tests
        cargo test --release --all-features stress_test
        cargo test --release --all-features concurrency_tests

  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Check release build
      run: cargo build --release --all-features

    - name: Verify version consistency
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        TAG=${GITHUB_REF#refs/tags/}
        if [ "$VERSION" != "$TAG" ]; then
          echo "Version mismatch: Cargo.toml has $VERSION, tag is $TAG"
          exit 1
        fi

    - name: Run full test suite
      run: |
        cargo test --release --all-features
        cargo test --release --all-features --doc

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, coverage, security, docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.coverage.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.coverage.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        exit 1