name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Before cleanup:"
        df -h /
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/share/swift
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        echo "After cleanup:"
        df -h /

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-slim-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-slim-
        save-always: false  # Don't save cache if build fails or disk is full

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy with optimized settings
      env:
        CARGO_TARGET_DIR: /tmp/cargo-target-clippy
        RUSTFLAGS: "-C debuginfo=0"
      run: |
        cargo clippy --workspace --all-targets --all-features -- -D warnings
        rm -rf /tmp/cargo-target-clippy
        df -h /

    - name: Check disk space before build
      run: df -h /

    - name: Run tests with CI-optimized build settings
      env:
        CARGO_TARGET_DIR: /tmp/cargo-target
        CARGO_BUILD_JOBS: 1
        CARGO_NET_RETRY: 2
        CARGO_NET_TIMEOUT: 10
      run: |
        # Use CI profile for minimal disk usage, run unit tests only (no integration tests requiring Docker)
        cargo test --workspace --profile ci --lib --bins
        echo "Tests completed, cleaning up intermediate files..."
        find /tmp/cargo-target -name "*.rlib" -delete 2>/dev/null || true
        find /tmp/cargo-target -name "*.rmeta" -delete 2>/dev/null || true
        rm -rf /tmp/cargo-target/ci/deps 2>/dev/null || true
        rm -rf /tmp/cargo-target/ci/build 2>/dev/null || true
        rm -rf /tmp/cargo-target/ci/incremental 2>/dev/null || true
        df -h /

    - name: Check examples compile (if space available)
      env:
        CARGO_TARGET_DIR: /tmp/cargo-target-examples
      run: |
        AVAILABLE_KB=$(df / | tail -1 | awk '{print $4}')
        echo "Available disk space: ${AVAILABLE_KB}KB"
        if [ $AVAILABLE_KB -gt 1000000 ]; then
          echo "Sufficient disk space, checking examples..."
          cargo check --examples --profile ci
          rm -rf /tmp/cargo-target-examples
          df -h /
        else
          echo "Insufficient disk space (${AVAILABLE_KB}KB < 1000000KB), skipping examples check"
        fi

    - name: Final cleanup and report
      if: always()
      run: |
        echo "Final cleanup..."
        rm -rf /tmp/cargo-target* 2>/dev/null || true
        rm -rf ~/.cargo/registry/cache/* 2>/dev/null || true
        echo "Final disk usage:"
        df -h /