[
  {
    "name": "Initialize Protocol",
    "description": "Test MCP lifecycle initialization requirements",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-1",
      "method": "initialize",
      "params": {
        "protocolVersion": "2025-06-18",
        "capabilities": {},
        "clientInfo": {
          "name": "ComplianceAuditor",
          "version": "1.0.0"
        }
      }
    },
    "expected": {
      "jsonrpc": "2.0",
      "id": "test-1",
      "result": {
        "protocolVersion": "2025-06-18",
        "capabilities": {
          "tools": {},
          "prompts": {},
          "resources": {},
          "sampling": {}
        },
        "serverInfo": {
          "name": "KnowledgeBase",
          "version": "1.0.0"
        }
      }
    }
  },
  {
    "name": "Tools List",
    "description": "Test tools/list method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-2",
      "method": "tools/list"
    },
    "requirements": [
      "Response MUST have 'tools' array",
      "Each tool MUST have 'name', 'description', 'inputSchema'",
      "inputSchema MUST be valid JSON Schema"
    ]
  },
  {
    "name": "Prompts List",
    "description": "Test prompts/list method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-3",
      "method": "prompts/list"
    },
    "requirements": [
      "Response MUST have 'prompts' array",
      "Each prompt MUST have 'name' and 'description'",
      "Arguments field is optional but if present must be array"
    ]
  },
  {
    "name": "Resources List",
    "description": "Test resources/list method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-4",
      "method": "resources/list"
    },
    "requirements": [
      "Response MUST have 'resources' array",
      "Each resource MUST have 'uri', 'name'",
      "URI MUST be valid according to RFC 3986"
    ]
  },
  {
    "name": "Prompts Get",
    "description": "Test prompts/get method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-5",
      "method": "prompts/get",
      "params": {
        "name": "summarize_docs",
        "arguments": {
          "document": "readme"
        }
      }
    },
    "requirements": [
      "Response MUST have 'messages' array",
      "Each message MUST have 'role' and 'content'",
      "Role MUST be 'user' or 'assistant'",
      "Content MUST have 'type' field"
    ]
  },
  {
    "name": "Resources Read",
    "description": "Test resources/read method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-6",
      "method": "resources/read",
      "params": {
        "uri": "resource_list_documents"
      }
    },
    "requirements": [
      "Response MUST have 'contents' array",
      "Each content item MUST have 'uri'",
      "Content MUST be properly formatted"
    ]
  },
  {
    "name": "Tools Call",
    "description": "Test tools/call method per MCP spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-7",
      "method": "tools/call",
      "params": {
        "name": "list_documents",
        "arguments": {}
      }
    },
    "requirements": [
      "Response MUST have 'content' array",
      "Content items MUST have 'type' field",
      "isError field MUST be boolean if present"
    ]
  },
  {
    "name": "Error Handling - Unknown Method",
    "description": "Test JSON-RPC error handling per spec",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-8",
      "method": "unknown/method"
    },
    "expected_error": {
      "code": -32601,
      "message": "Method not found"
    }
  },
  {
    "name": "Error Handling - Invalid Tool",
    "description": "Test tool-specific error handling",
    "request": {
      "jsonrpc": "2.0",
      "id": "test-9",
      "method": "tools/call",
      "params": {
        "name": "nonexistent_tool",
        "arguments": {}
      }
    },
    "expected_error": {
      "code": -32601,
      "message_contains": "Unknown tool"
    }
  }
]