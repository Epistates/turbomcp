//! Test the new macro implementation

use std::sync::Arc;
use turbomcp::{McpResult, RequestContext, prompt, resource, server, tool};

#[derive(Clone)]
struct TestServer {
    counter: Arc<std::sync::Mutex<i32>>,
}

#[server(
    name = "MacroTestServer",
    version = "1.0.0",
    description = "Testing macro implementation"
)]
#[allow(dead_code)]
impl TestServer {
    #[tool("Add two numbers together")]
    async fn add(&self, a: i32, b: i32) -> McpResult<i32> {
        Ok(a + b)
    }

    #[tool("Subtract two numbers")]
    async fn subtract(&self, a: i32, b: i32) -> McpResult<i32> {
        Ok(a - b)
    }

    #[tool("Get the current counter value")]
    async fn get_counter(&self) -> McpResult<i32> {
        let counter = self.counter.lock().unwrap();
        Ok(*counter)
    }

    #[tool("Increment the counter")]
    async fn increment_counter(&self) -> McpResult<i32> {
        let mut counter = self.counter.lock().unwrap();
        *counter += 1;
        Ok(*counter)
    }

    #[resource("file://{path}")]
    async fn read_file(&self, uri: String) -> McpResult<String> {
        // Extract path from URI
        let path = uri.strip_prefix("file://").unwrap_or(&uri);
        Ok(format!("Contents of file: {path}"))
    }

    #[prompt("Generate a greeting")]
    async fn greeting_prompt(
        &self,
        _ctx: RequestContext,
        _args: Option<serde_json::Value>,
    ) -> McpResult<String> {
        Ok("Hello from the macro-generated prompt!".to_string())
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    tracing_subscriber::fmt().with_env_filter("info").init();

    tracing::info!("ðŸš€ Starting Macro Test Server");

    let server = TestServer {
        counter: Arc::new(std::sync::Mutex::new(0)),
    };

    // This run_stdio method is generated by the macro
    server.run_stdio().await?;

    Ok(())
}
